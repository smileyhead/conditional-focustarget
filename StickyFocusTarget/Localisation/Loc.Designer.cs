//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StickyFocusTarget.Localisation {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Loc {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Loc() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("StickyFocusTarget.Localisation.Loc", typeof(Loc).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Focus changed.
        /// </summary>
        internal static string announcement_changed {
            get {
                return ResourceManager.GetString("announcement_changed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Focus unchanged.
        /// </summary>
        internal static string announcement_unchanged {
            get {
                return ResourceManager.GetString("announcement_unchanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Focus unchanged: disabled in PvP.
        /// </summary>
        internal static string announcement_unchanged_pvp {
            get {
                return ResourceManager.GetString("announcement_unchanged_pvp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes current target your focus target when there is no current focus target. Alias: /cft.
        /// </summary>
        internal static string command_description_long {
            get {
                return ResourceManager.GetString("command_description_long", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes current target your focus target when there is no current focus target.
        /// </summary>
        internal static string command_description_short {
            get {
                return ResourceManager.GetString("command_description_short", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not announce.
        /// </summary>
        internal static string settings_chat_announce_do_not {
            get {
                return ResourceManager.GetString("settings_chat_announce_do_not", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Announce focus change in chat window:.
        /// </summary>
        internal static string settings_chat_announce_title {
            get {
                return ResourceManager.GetString("settings_chat_announce_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Announce, if focus changed.
        /// </summary>
        internal static string settings_chat_announce_yes_if_changed {
            get {
                return ResourceManager.GetString("settings_chat_announce_yes_if_changed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Announce, if focus not changed.
        /// </summary>
        internal static string settings_chat_announce_yes_if_not_changed {
            get {
                return ResourceManager.GetString("settings_chat_announce_yes_if_not_changed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Available commands:.
        /// </summary>
        internal static string settings_commands_title {
            get {
                return ResourceManager.GetString("settings_commands_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable announcements in PvP.
        /// </summary>
        internal static string settings_disable_in_pvp {
            get {
                return ResourceManager.GetString("settings_disable_in_pvp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contribute.
        /// </summary>
        internal static string settings_lang_contribute_button {
            get {
                return ResourceManager.GetString("settings_lang_contribute_button", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can help out with translation over at GitHub
        ///{githubLink}.
        /// </summary>
        internal static string settings_lang_contribute_tooltip {
            get {
                return ResourceManager.GetString("settings_lang_contribute_tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatic.
        /// </summary>
        internal static string settings_lang_dropdown_auto {
            get {
                return ResourceManager.GetString("settings_lang_dropdown_auto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language: .
        /// </summary>
        internal static string settings_lang_dropdown_label {
            get {
                return ResourceManager.GetString("settings_lang_dropdown_label", resourceCulture);
            }
        }
    }
}
